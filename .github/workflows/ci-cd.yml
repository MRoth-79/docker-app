name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch (or the branch you prefer)
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub Actions tab

jobs:
  build-and-run:
    runs-on: ubuntu-latest # Uses a fresh Ubuntu virtual machine for each job

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Action to clone your repository to the runner, updated to v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Using the dedicated action for Docker login
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Your DockerHub username from GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Your DockerHub password/PAT from GitHub Secrets

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Recommended for modern Docker builds (enables multi-platform builds, caching etc.)

      - name: Get current date for image tag
        id: date
        run: echo "DATE=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT # Get current date for a unique tag

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5 # Using the dedicated action to build and push Docker images
        with:
          context: . # Build context is the root of the repository where Dockerfile is located
          push: true # Push the image to Docker Hub after building
          # IMPORTANT: Replace YOUR_DOCKERHUB_USERNAME with your actual DockerHub username here!
          tags: ${{ secrets.DOCKER_USERNAME }}/nodejs-app:${{ steps.date.outputs.DATE }},${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest
          # Tags the image with a unique date-based tag and also with 'latest'

      - name: Run Docker container (for verification on runner)
        run: |
          echo "Stopping and removing any previous containers on this temporary runner..."
          docker stop nodejs-app-container || true # Stop the container if it's already running
          docker rm nodejs-app-container || true   # Remove the container if it exists
          
          echo "Running container from image ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest"
          docker run -d -p 3000:3000 --name nodejs-app-container ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest
          # -d: Run the container in detached mode (in the background)
          # -p 3000:3000: Maps port 3000 inside the container to port 3000 on the GitHub Actions runner
          # --name: Assigns a name to the container for easier management
          
          echo "Container started. Waiting 5 seconds for the app to initialize..."
          sleep 5 # Give the Node.js application some time to fully start up inside the container
          
          echo "Verifying application access via curl (http://localhost:3000)..."
          # Attempt to access the application's endpoint to ensure it's running and responsive
          # || true prevents the step from failing immediately if curl itself fails (gives time to see logs)
          curl -v http://localhost:3000 || true 
          
          echo "Viewing container logs for initial output..."
          docker logs nodejs-app-container # Display the container logs for debugging/verification

          # Important Note: The container launched here is temporary and runs on the GitHub Actions runner.
          # This runner is a fresh virtual machine for each job and is destroyed after the job completes.
          # This step serves as a verification that the Docker image is buildable and runnable.
          # For actual deployment to a persistent server (e.g., your own VM, cloud VM, Kubernetes),
          # you would add dedicated deployment steps here (e.g., SSH to a server and run docker commands,
          # or use a cloud provider's deployment tools like ECS, AKS, GKE, etc.).